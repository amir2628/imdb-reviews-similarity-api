# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI

import os
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from app.dependencies import get_db
from app.schemas.review import ReviewCreate, ReviewResponse, FindSimilarRequest, TaskResponse, StatusResponse
from app.models.review import Review
from app.tasks.tasks import find_similar_reviews
from celery.result import AsyncResult
from transformers import DistilBertForSequenceClassification, DistilBertTokenizer
import torch

app = FastAPI(
    title="IMDB Reviews Similarity API", 
    description="API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ñ–∏–ª—å–º—ã",
    version="1.0.0"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
model = None
tokenizer = None

def check_model_ready():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
    model_path = './fine_tuned_model'
    required_files = [
        'config.json',
        'pytorch_model.bin', 
        'special_tokens_map.json',
        'tokenizer_config.json',
        'vocab.txt'
    ]
    
    if not os.path.exists(model_path):
        return False
        
    for file_name in required_files:
        file_path = os.path.join(model_path, file_name)
        if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
            return False
    
    return True

def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"""
    global model, tokenizer
    
    if model is None or tokenizer is None:
        model_path = './fine_tuned_model'
        
        if not check_model_ready():
            raise FileNotFoundError(f"–î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –ø–æ –ø—É—Ç–∏ {model_path}. –ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –æ–±—É—á–∞–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        
        print("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞...")
        try:
            model = DistilBertForSequenceClassification.from_pretrained(model_path, local_files_only=True)
            tokenizer = DistilBertTokenizer.from_pretrained(model_path, local_files_only=True)
            model.eval()
            print("–ú–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)"""
    print("–ó–∞–ø—É—Å–∫ IMDB Reviews Similarity API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
    if os.path.exists("./training_in_progress.marker"):
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ä –æ–±—É—á–µ–Ω–∏—è - –º–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –æ–±—É—á–∞–µ—Ç—Å—è")
        print("API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
    if check_model_ready():
        print("–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        try:
            load_model()
            print("üéâ API –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        except Exception as e:
            print(f"–ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            print("–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ")
    else:
        print("–û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è")

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    status = {
        "status": "healthy",
        "training_in_progress": os.path.exists("./training_in_progress.marker"),
        "model_ready": check_model_ready(),
        "model_loaded": model is not None and tokenizer is not None
    }
    return status

@app.post("/add_review", response_model=ReviewResponse)
async def add_review(review: ReviewCreate, db: AsyncSession = Depends(get_db)):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –µ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
    if os.path.exists("./training_in_progress.marker"):
        raise HTTPException(
            status_code=503, 
            detail="–ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –æ–±—É—á–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è."
        )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if model is None or tokenizer is None:
        try:
            load_model()
        except FileNotFoundError:
            raise HTTPException(
                status_code=503, 
                detail="–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤—Å–µ –µ—â–µ –æ–±—É—á–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ /health"
            )
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}"
            )
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞
    try:
        with torch.no_grad():
            inputs = tokenizer(review.text, return_tensors="pt", truncation=True, max_length=512)
            outputs = model.distilbert(**inputs)
            embedding = outputs.last_hidden_state[:, 0, :].detach().numpy().tolist()[0]
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {str(e)}"
        )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db_review = Review(text=review.text, vector=embedding)
        db.add(db_review)
        await db.commit()
        await db.refresh(db_review)
        return db_review
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )

@app.post("/find_similar", response_model=TaskResponse)
async def find_similar(request: FindSimilarRequest):
    """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Celery"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
    if os.path.exists("./training_in_progress.marker"):
        raise HTTPException(
            status_code=503, 
            detail="–ú–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –æ–±—É—á–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è."
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    if not check_model_ready():
        raise HTTPException(
            status_code=503,
            detail="–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ /health"
        )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ Celery
    try:
        task = find_similar_reviews.delay(request.text)
        return {"task_id": task.id}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}"
        )

@app.get("/status/{task_id}", response_model=StatusResponse)
async def get_status(task_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ Celery"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        task_result = AsyncResult(task_id)
        
        if task_result.ready():
            if task_result.successful():
                result = task_result.get()
                return {"status": "completed", "result": result}
            else:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                error_info = str(task_result.info) if task_result.info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                return {"status": "failed", "result": error_info}
        else:
            return {"status": "pending", "result": None}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {str(e)}"
        )